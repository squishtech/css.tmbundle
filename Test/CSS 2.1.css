/** Misc  */

/*String newlines*/

div{something: "public class foo\
{\
    private int x;\
\
    foo(int x) {\
        this.x = x;\
    }\
\
}";}

div{something: "public class foo
{
    private int x;

    foo(int x) {
        this.x = x;
    }

}";}
;}

/* /Misc **/





/*http://www.w3.org/TR/CSS21/syndata.html#at-rules*/
/** At-Rules  */
/*
4.1.5 At-rules

At-rules start with an at-keyword, an '@' character followed immediately by an identifier (for example, '@import', '@page').

An at-rule consists of everything up to and including the next semicolon (;) or the next block, whichever comes first.

CSS 2.1 user agents must ignore any '@import' rule that occurs inside a block or after any valid statement other than an @charset or an @import rule.

Assume, for example, that a CSS 2.1 parser encounters this style sheet:
*/

@import "subs.css";
h1 { color: blue }
@import "list.css";
/*The second '@import' is illegal according to CSS 2.1. The CSS 2.1 parser ignores the whole at-rule, effectively reducing the style sheet to:*/

@import "subs.css";
h1 { color: blue }
/*In the following example, the second '@import' rule is invalid, since it occurs inside a '@media' block.*/

@import "subs.css";
@media print {
  @import "print-main.css";
  body { font-size: 10pt }
}
h1 {color: blue }
/*Instead, to achieve the effect of only importing a style sheet for 'print' media, use the @import rule with media syntax, e.g.:*/

@import "subs.css";
@import "print-main.css" print;
@media print {
  body { font-size: 10pt }
}
h1 {color: blue }

/*  At-Rules **/

/** Blocks  */

/*Here is an example of a block. Note that the right brace between the double quotes does not match the opening brace of the block, and that the second single quote is an escaped character, and thus doesn't match the first single quote:*/

{ causta: "}" + ({7} * '\'') }
{ causta: "{{{}}}" }
div { background: url("http://image.com/images/image.gif"); }
div { background: url("http://image.com/images/image.gif?}"); }

/*Note that the above rule is not valid CSS 2.1, but it is still a block as defined above.*/


/*  Blocks **/

/** 4.1.7 Rule sets, declaration blocks, and selectors  */

/*For example, since the "&" is not a valid token in a CSS 2.1 selector, a CSS 2.1 user agent must ignore the whole second line, and not set the color of H3 to red:*/
h1, h2 {color: green }
h3, h4 & h5 {color: red }
h6 {color: black }
/*Here is a more complex example. The first two pairs of curly braces are inside a string, and do not mark the end of the selector. This is a valid CSS 2.1 rule.*/

p[example="public 
class"] {}

p[example=publicclass] {}
p[example=public\
class] {}

p[example="public"] {}
p[example="public \
class"] {}
p[example="public class foo\
{\
    private int x;\
\
    foo(int x) {\
        this.x = x;\
    }\
\
}"] {}

/* /4.1.7 Rule sets, declaration blocks, and selectors **/

/** 4.1.8 Declarations and properties  */

/*A declaration is either empty or consists of a property name, followed by a colon (:), followed by a value. Around each of these there may be whitespace.

Because of the way selectors work, multiple declarations for the same selector may be organized into semicolon (;) separated groups.
*/
/*Thus, the following rules:*/

h1 { font-weight: bold }
h1 { font-size: 12px }
h1 { line-height: 14px }
h1 { font-family: Helvetica }
h1 { font-variant: normal }
h1 { font-style: normal }
/*are equivalent to:*/

h1 {
  font-weight: bold;
  font-size: 12px;
  line-height: 14px;
  font-family: Helvetica;
  font-variant: normal;
  font-style: normal
}
/*A property name is an identifier. Any token may occur in the value. Parentheses ("( )"), brackets ("[ ]"), braces ("{ }"), single quotes (') and double quotes (") must come in matching pairs, and semicolons not in strings must be escaped. Parentheses, brackets, and braces may be nested. Inside the quotes, characters are parsed as a string.

The syntax of values is specified separately for each property, but in any case, values are built from identifiers, strings, numbers, lengths, percentages, URIs, colors, etc.

A user agent must ignore a declaration with an invalid property name or an invalid value. Every CSS 2.1 property has its own syntactic and semantic restrictions on the values it accepts.
*/
/*For example, assume a CSS 2.1 parser encounters this style sheet:*/

h1 { color: red; font-style: 12pt }  /* Invalid value: 12pt */
p { color: blue;  font-vendor: any;  /* Invalid prop.: font-vendor */
    font-variant: small-caps }
em em { font-style: normal }
/*The second declaration on the first line has an invalid value '12pt'. The second declaration on the second line contains an undefined property 'font-vendor'. The CSS 2.1 parser will ignore these declarations, effectively reducing the style sheet to:*/

h1 { color: red; }
p { color: blue;  font-variant: small-caps }
em em { font-style: normal }

/* /4.1.8 Declarations and properties **/

/** 4.2 Rules for handling parsing errors  */

/*In some cases, user agents must ignore part of an illegal style sheet. This specification defines ignore to mean that the user agent parses the illegal part (in order to find its beginning and end), but otherwise acts as if it had not been there. CSS 2.1 reserves for future updates of CSS all property:value combinations and @-keywords that do not contain an identifier beginning with dash or underscore. Implementations must ignore such combinations (other than those introduced by future updates of CSS).*/

/*To ensure that new properties and new values for existing properties can be added in the future, user agents are required to obey the following rules when they encounter the following scenarios:*/

/*Unknown properties. User agents must ignore a declaration with an unknown property. For example, if the style sheet is:*/
h1 { color: red; rotation: 70minutes }
/*the user agent will treat this as if the style sheet had been*/

h1 { color: red }
/*Illegal values. User agents must ignore a declaration with an illegal value. For example:*/
img { float: left }       /* correct CSS 2.1 */
img { float: left here }  /* "here" is not a value of 'float' */
img { background: "red" } /* keywords cannot be quoted */
img { border-width: 3 }   /* a unit must be specified for length values */
/*A CSS 2.1 parser would honor the first rule and ignore the rest, as if the style sheet had been:*/
img { float: left }
img { }
img { }
img { }
/*A user agent conforming to a future CSS specification may accept one or more of the other rules as well.*/

/*Malformed declarations. User agents must handle unexpected tokens encountered while parsing a declaration by reading until the end of the declaration, while observing the rules for matching pairs of (), [], {}, "", and '', and correctly handling escapes. For example, a malformed declaration may be missing a property, colon (:) or value. The following are all equivalent:*/
p { color:green }
p { color:green; color }  /* malformed declaration missing ':', value */
p { color:red;   color; color:green }  /* same with expected recovery */
p { color:green; color: } /* malformed declaration missing value */
p { color:red;   color:; color:green } /* same with expected recovery */
p { color:green; color{;color:maroon} } /* unexpected tokens { } */
p { color:red;   color{;color:maroon}; color:green } /* same with recovery */
/*Invalid at-keywords. User agents must ignore an invalid at-keyword together with everything following it, up to and including the next semicolon (;) or block ({...}), whichever comes first. For example, consider the following:*/
@three-dee {
  @background-lighting {
    azimuth: 30deg;
    elevation: 190deg;
  }
  h1 { color: red }
}
h1 { color: blue }
/*The '@three-dee' at-rule is not part of CSS 2.1. Therefore, the whole at-rule (up to, and including, the third right curly brace) is ignored. A CSS 2.1 user agent ignores it, effectively reducing the style sheet to:*/

h1 { color: blue }
/*Something inside an at-rule that is ignored because it is invalid, such as an invalid declaration within an @media-rule, does not make the entire at-rule invalid.*/

/*Unexpected end of style sheet.
User agents must close all open constructs (for example: blocks, parentheses, brackets, rules, strings, and comments) at the end of the style sheet. For example:
*/
  @media screen {
    p:before { content: 'Hello
/*EOF ;}}\*//*(end)*/
  }

/*would be treated the same as:*/

  @media screen {
    p:before { content: 'Hello'; }
  }
/*in a conformant UA.*/

/*Unexpected end of string.
User agents must close strings upon reaching the end of a line, but then drop the construct (declaration or rule) in which the string was found. For example:*/
      p {
        color: green;
        font-family: 'Courier New Times
        color: red;
        color: green;
      }
/*...would be treated the same as:*/

      p { color: green; color: green; }
/*...because the second declaration (from 'font-family' to the semicolon after 'color: red') is invalid and is dropped.*/

/*See also Rule sets, declaration blocks, and selectors for parsing rules for declaration blocks.*/

/* /4.2 Rules for handling parsing errors **/


/** 4.3.1 Integers and real numbers  */

/*
Some value types may have integer values (denoted by <integer>) or real number values (denoted by <number>). Real numbers and integers are specified in decimal notation only. An <integer> consists of one or more digits "0" to "9". A <number> can either be an <integer>, or it can be zero or more digits followed by a dot (.) followed by one or more digits. Both integers and real numbers may be preceded by a "-" or "+" to indicate the sign. -0 is equivalent to 0 and is not a negative number.

Note that many properties that allow an integer or real number as a value actually restrict the value to some range, often to a non-negative value.
*/

/* /4.3.1 Integers and real numbers **/


/** 4.3.2 Lengths  */

/*
Lengths refer to horizontal or vertical measurements.

The format of a length value (denoted by <length> in this specification) is a <number> (with or without a decimal point) immediately followed by a unit identifier (e.g., px, em, etc.). After a zero length, the unit identifier is optional.

Some properties allow negative length values, but this may complicate the formatting model and there may be implementation-specific limits. If a negative length value cannot be supported, it should be converted to the nearest value that can be supported.

If a negative length value is set on a property that does not allow negative length values, the declaration is ignored.

There are two types of length units: relative and absolute. Relative length units specify a length relative to another length property. Style sheets that use relative units will more easily scale from one medium to another (e.g., from a computer display to a laser printer).

Relative units are:

em: the 'font-size' of the relevant font
ex: the 'x-height' of the relevant font
px: pixels, relative to the viewing device*/
h1 { margin: 0.5em }      /* em */
h1 { margin: 1ex }        /* ex */
p  { font-size: 12px }    /* px */
/*The 'em' unit is equal to the computed value of the 'font-size' property of the element on which it is used. The exception is when 'em' occurs in the value of the 'font-size' property itself, in which case it refers to the font size of the parent element. It may be used for vertical or horizontal measurement. (This unit is also sometimes called the quad-width in typographic texts.)

The 'ex' unit is defined by the element's first available font. The 'x-height' is so called because it is often equal to the height of the lowercase "x". However, an 'ex' is defined even for fonts that don't contain an "x".

The x-height of a font can be found in different ways. Some fonts contain reliable metrics for the x-height. If reliable font metrics are not available, UAs may determine the x-height from the height of a lowercase glyph. One possible heuristics is to look at how far the glyph for the lowercase "o" extends below the baseline, and subtract that value from the top of its bounding box. In the cases where it is impossible or impractical to determine the x-height, a value of 0.5em should be used.

The rule:
*/
h1 { line-height: 1.2em }
/*means that the line height of "h1" elements will be 20% greater than the font size of the "h1" elements. On the other hand:*/

h1 { font-size: 1.2em }
/*means that the font-size of "h1" elements will be 20% greater than the font size inherited by "h1" elements.*/

/*When specified for the root of the document tree (e.g., "HTML" in HTML), 'em' and 'ex' refer to the property's initial value.

Pixel units are relative to the resolution of the viewing device, i.e., most often a computer display. If the pixel density of the output device is very different from that of a typical computer display, the user agent should rescale pixel values. It is recommended that the reference pixel be the visual angle of one pixel on a device with a pixel density of 96dpi and a distance from the reader of an arm's length. For a nominal arm's length of 28 inches, the visual angle is therefore about 0.0213 degrees.

For reading at arm's length, 1px thus corresponds to about 0.26 mm (1/96 inch). When printed on a laser printer, meant for reading at a little less than arm's length (55 cm, 21 inches), 1px is about 0.20 mm. On a 300 dots-per-inch (dpi) printer, that may be rounded up to 3 dots (0.25 mm); on a 600 dpi printer, it can be rounded to 5 dots.

The two images below illustrate the effect of viewing distance on the size of a pixel and the effect of a device's resolution. In the first image, a reading distance of 71 cm (28 inch) results in a px of 0.26 mm, while a reading distance of 3.5 m (12 feet) requires a px of 1.3 mm.

   [D]

In the second image, an area of 1px by 1px is covered by a single dot in a low-resolution device (a computer screen), while the same area is covered by 16 dots in a higher resolution device (such as a 400 dpi laser printer).

   [D]

Child elements do not inherit the relative values specified for their parent; they inherit the computed values.

In the following rules, the computed 'text-indent' value of "h1" elements will be 36px, not 45px, if "h1" is a child of the "body" element.
*/
body {
  font-size: 12px;
  text-indent: 3em;  /* i.e., 36px */
}
h1 { font-size: 15px }
/*Absolute length units are only useful when the physical properties of the output medium are known. The absolute units are:*/

/*in: inches — 1 inch is equal to 2.54 centimeters.
cm: centimeters
mm: millimeters
pt: points — the points used by CSS 2.1 are equal to 1/72nd of an inch.
pc: picas — 1 pica is equal to 12 points.*/
h1 { margin: 0.5in }      /* inches  */
h2 { line-height: 3cm }   /* centimeters */
h3 { word-spacing: 4mm }  /* millimeters */
h4 { font-size: 12pt }    /* points */
h4 { font-size: 1pc }     /* picas */
/*In cases where the used length cannot be supported, user agents must approximate it in the actual value.*/

/* /4.3.2 Lengths **/






/** 4.3.3 Percentages  */

/*The format of a percentage value (denoted by <percentage> in this specification) is a <number> immediately followed by '%'.

Percentage values are always relative to another value, for example a length. Each property that allows percentages also defines the value to which the percentage refers. The value may be that of another property for the same element, a property for an ancestor element, or a value of the formatting context (e.g., the width of a containing block). When a percentage value is set for a property of the root element and the percentage is defined as referring to the inherited value of some property, the resultant value is the percentage times the initial value of that property.

Since child elements (generally) inherit the computed values of their parent, in the following example, the children of the P element will inherit a value of 12px for 'line-height', not the percentage value (120%):
*/
p { font-size: 10px }
p { line-height: 120% }  /* 120% of 'font-size' */

/* /4.3.3 Percentages **/


/** 4.3.4 URLs and URIs  */

/*URI values (Uniform Resource Identifiers, see [RFC3986], which includes URLs, URNs, etc) in this specification are denoted by <uri>. The functional notation used to designate URIs in property values is "url()", as in:*/

body { background: url("http://www.example.com/pinkish.png") }
/*The format of a URI value is 'url(' followed by optional whitespace followed by an optional single quote (') or double quote (") character followed by the URI itself, followed by an optional single quote (') or double quote (") character followed by optional whitespace followed by ')'. The two quote characters must be the same.*/

/*An example without quotes:*/

li { list-style: url(http://www.example.com/redball.png) disc }
/*Some characters appearing in an unquoted URI, such as parentheses, commas, whitespace characters, single quotes (') and double quotes ("), must be escaped with a backslash so that the resulting URI value is a URI token: '\(', '\)', '\,'.

Depending on the type of URI, it might also be possible to write the above characters as URI-escapes (where "(" = %28, ")" = %29, etc.) as described in [RFC3986].

In order to create modular style sheets that are not dependent on the absolute location of a resource, authors may use relative URIs. Relative URIs (as defined in [RFC3986]) are resolved to full URIs using a base URI. RFC 3986, section 5, defines the normative algorithm for this process. For CSS style sheets, the base URI is that of the style sheet, not that of the source document.

For example, suppose the following rule:
*/
body { background: url("yellow") }
/*is located in a style sheet designated by the URI:

http://www.example.org/style/basic.css
The background of the source document's BODY will be tiled with whatever image is described by the resource designated by the URI

http://www.example.org/style/yellow
User agents may vary in how they handle invalid URIs or URIs that designate unavailable or inapplicable resources.
*/

/* /4.3.4 URLs and URIs **/


/** 4.3.5 Counters  */

/*Counters are denoted by identifiers (see the 'counter-increment' and 'counter-reset' properties). To refer to the value of a counter, the notation 'counter(<identifier>)' or 'counter(<identifier>, <'list-style-type'>)', with optional whitespace separating the tokens, is used. The default style is 'decimal'.

To refer to a sequence of nested counters of the same name, the notation is 'counters(<identifier>, <string>)' or 'counters(<identifier>, <string>, <'list-style-type'>)' with optional whitespace separating the tokens.

See "Nested counters and scope" in the chapter on generated content for how user agents must determine the value or values of the counter. See the definition of counter values of the 'content' property for how it must convert these values to a string.

In CSS 2.1, the values of counters can only be referred to from the 'content' property. Note that 'none' is a possible <'list-style-type'>: 'counter(x, none)' yields an empty string.

Here is a style sheet that numbers paragraphs (p) for each chapter (h1). The paragraphs are numbered with roman numerals, followed by a period and a space:
*/
p {counter-increment: par-num}
h1 {counter-reset: par-num}
p:before {content: counter(par-num, upper-roman) ". "}

/* /4.3.5 Counters **/


/** 4.3.6 Colors  */

/*A <color> is either a keyword or a numerical RGB specification.

The list of color keywords is: aqua, black, blue, fuchsia, gray, green, lime, maroon, navy, olive, orange, purple, red, silver, teal, white, and yellow. These 17 colors have the following values:

maroon #800000 red #ff0000 orange #ffA500 yellow #ffff00 olive #808000
purple #800080fuchsia #ff00ffwhite #fffffflime #00ff00green #008000
navy #000080blue #0000ffaqua #00ffffteal #008080
black #000000silver #c0c0c0gray #808080
In addition to these color keywords, users may specify keywords that correspond to the colors used by certain objects in the user's environment. Please consult the section on system colors for more information.
*/
body {color: black; background: white }
h1 { color: maroon }
h2 { color: olive }
/*The RGB color model is used in numerical color specifications. These examples all specify the same color:*/

em { color: #f00 }              /* #rgb */
em { color: #ff0000 }           /* #rrggbb */
em { color: rgb(255,0,0) }      
em { color: rgb(100%, 0%, 0%) } 
/*The format of an RGB value in hexadecimal notation is a '#' immediately followed by either three or six hexadecimal characters. The three-digit RGB notation (#rgb) is converted into six-digit form (#rrggbb) by replicating digits, not by adding zeros. For example, #fb0 expands to #ffbb00. This ensures that white (#ffffff) can be specified with the short notation (#fff) and removes any dependencies on the color depth of the display.

The format of an RGB value in the functional notation is 'rgb(' followed by a comma-separated list of three numerical values (either three integer values or three percentage values) followed by ')'. The integer value 255 corresponds to 100%, and to F or FF in the hexadecimal notation: rgb(255,255,255) = rgb(100%,100%,100%) = #FFF. Whitespace characters are allowed around the numerical values.

All RGB colors are specified in the sRGB color space (see [SRGB]). User agents may vary in the fidelity with which they represent these colors, but using sRGB provides an unambiguous and objectively measurable definition of what the color should be, which can be related to international standards (see [COLORIMETRY]).

Conforming user agents may limit their color-displaying efforts to performing a gamma-correction on them. sRGB specifies a display gamma of 2.2 under specified viewing conditions. User agents should adjust the colors given in CSS such that, in combination with an output device's "natural" display gamma, an effective display gamma of 2.2 is produced. See the section on gamma correction for further details. Note that only colors specified in CSS are affected; e.g., images are expected to carry their own color information.

Values outside the device gamut should be clipped or mapped into the gamut when the gamut is known: the red, green, and blue values must be changed to fall within the range supported by the device. Users agents may perform higher quality mapping of colors from one gamut to another. For a typical CRT monitor, whose device gamut is the same as sRGB, the four rules below are equivalent:*/

em { color: rgb(255,0,0) }       /* integer range 0 - 255 */
em { color: rgb(300,0,0) }       /* clipped to rgb(255,0,0) */
em { color: rgb(255,-10,0) }     /* clipped to rgb(255,0,0) */
em { color: rgb(110%, 0%, 0%) }  /* clipped to rgb(100%,0%,0%) */
/*Other devices, such as printers, have different gamuts than sRGB; some colors outside the 0..255 sRGB range will be representable (inside the device gamut), while other colors inside the 0..255 sRGB range will be outside the device gamut and will thus be mapped.

Note. Mapping or clipping of color values should be done to the actual device gamut if known (which may be larger or smaller than 0..255).
*/
/* /4.3.6 Colors **/


/** 4.3.7 Strings  */

/*Strings can either be written with double quotes or with single quotes. Double quotes cannot occur inside double quotes, unless escaped (e.g., as '\"' or as '\22'). Analogously for single quotes (e.g., "\'" or "\27").

"this is a 'string'"
"this is a \"string\""
'this is a "string"'
'this is a \'string\''
A string cannot directly contain a newline. To include a newline in a string, use an escape representing the line feed character in ISO-10646 (U+000A), such as "\A" or "\00000a". This character represents the generic notion of "newline" in CSS. See the 'content' property for an example.

It is possible to break strings over several lines, for esthetic or other reasons, but in such a case the newline itself has to be escaped with a backslash (\). For instance, the following two selectors are exactly the same:
*/
a[title="a not s\
o very long title"] {/*...*/}
a[title="a not so very long title"] {/*...*/}

/* /4.3.7 Strings **/


/** 4.3.8 Unsupported Values  */

/*If a UA does not support a particular value, it should ignore that value when parsing style sheets, as if that value was an illegal value. For example:*/

  h3 {
    display: inline;
    display: run-in;
  }
/*A UA that supports the 'run-in' value for the 'display' property will accept the first display declaration and then "write over" that value with the second display declaration. A UA that does not support the 'run-in' value will process the first display declaration and ignore the second display declaration.*/

/* /4.3.8 Unsupported Values **/

div{
	background: rgb(128, 128, 128);
	background: rgba(128, 128, 128, 0.5);
	background: rgba(0%, 25%, 50%, 0.5);
	background: url(0%, 25%, 50%, 0.5);
	background: url(0%, 25%, 50%, 0.5);
	background: url( 0%, 25%, 50%, 0.5  );
	background: url( http://www.image.com/image.gif?image );
	background: url( 'http://www.image.com/image.gif?image' );
	background: url( "http://www.image.com/image.gif?image" );
	
	
}
em { color: rgb(255,0,0) }      /* integer range 0 - 255 */
em { color: rgba(255,0,0,1) }   /* the same, with explicit opacity of 1 */
em { color: rgb(100%,0%,0%) }   /* float range 0.0% - 100.0% */
em { color: rgba(100%,0%,0%,1) }/* the same, with explicit opacity of 1 */
em { color: rgb(256,0,0) }      /* integer range 0 - 255 */
em { color: rgba(255,.0,0,1) }   /* the same, with explicit opacity of 1 */
em { color: rgb(100%,0,0%) }   /* float range 0.0% - 100.0% */
em { color: rgba(100%,0%,0%,1.0) }/* the same, with explicit opacity of 1 */
* { color: hsl(0, 100%, 50%) }   /* red */
* { color: hsl(120, 100%, 50%) } /* green */ 
* { color: hsl(120, 100%, 25%) } /* light green */ 
* { color: hsl(120, 100%, 75%) } /* dark green */ 
* { color: hsl(120, 50%, 50%) }  /* pastel green, and so on */
